% moveDots1.m
% Display showing two fields of overlapping dots. One on each side of the
% display.

clear all
meta.expdir = 'C:\Users\Kit Moreland\Dropbox\UW\Research\DividedAttention\FeatureBasedAttention\OverlappingDots';

meta.subj = 'KM';
meta.expName = 'moveDots1';
meta.date = datestr(now, 'dd-mmm-yyyy');
meta.scriptDate = '04/18/17';
meta.computer = 0;  % 0 = laptop, 1 = lab
meta.debugging = 1;
meta.initialSeed = ClockRandSeed;

p.nTargets = 2;

fprintf('\nSubject: %s\n', meta.subj);
fprintf('\nExperiment: %s\n', meta.expName);

if ~meta.computer
    p.computerName = 'DellXPS13';
else
    p.computerName = 'coombs';
end
%% Folder Paths

meta.dataDr = fullfile(meta.expdir,meta.subj, 'Data');
if ~isdir(meta.dataDr)
    mkdir(meta.dataDr)
end
meta.noiseFolder = fullfile(meta.expdir,'movies/');

% Set up save files
session = '_session_';

meta.saveFileName = [meta.expName,'_',meta.subj,session];
meta.sessionFile = fullfile(meta.dataDr,meta.saveFileName);

meta.blockTmpFileName = [meta.expName, '_', meta.subj, '_tmp_'];
meta.BlockTmpFile = fullfile(meta.dataDr,meta.blockTmpFileName); % This format will be used to add blocks onto the end of.

%% Condition structure
% Directions dont have to be up and down but convenient labels for now.
cond.blocklabel = {'Dual Task: Same Up', ...	% (1) Dual Same (up left)
    'Dual Task: Same Down', ...                 % (2) Dual Same (down left)
    'Dual Task: Different Up', ...         % (3) Dual Different (left up)
    'Dual Task: Different Down', ...       % (4) Dual Different (left down)
    
    'Single Task Left: Same Up', ...                 % (5) Single Same
    'Single Task Left: Same Down', ...               % (6) Single Same
    'Single Task Left: Different Up', ...       % (7) Single Different
    'Single Task Left: Different Down', ...     % (8) Single Different
    
    'Single Task Right: Same Up', ...                   % (9) Single Same
    'Single Task Right: Same Down', ...                 % (10) Single Same
    'Single Task Right: Different Up', ...         % (11) Single Different
    'Single Task Right: Different Down', ...       % (12) Single Different
    };

if ~meta.debugging
    % 24 trials and this block structure gives 48 trials per condition -
    % this might be underpowered.
    cond.nTrials = 24;                          % Number of trials per block
    cond.blockvector = [1,2,3,4,1,2,3,4,5,6,7,8,9,10,11,12];
elseif sessionType == 1
    cond.nTrials = 24;
    cond.blockvector = [1,2,3,4,5,6,7,8,9,10,11,12];
elseif sessionTyep == 2
    cond.nTrials = 24;
    cond.blockvector = [1,2,3,4, 1,2,3,4, 1,2,3,4];
end
cond.nBlocks = length(cond.blockvector);% Number of blocks

cond = createTrialTypes(cond);

%% Response Keys

buttons = getKeyAssignment(0); % 0 - kits computer keys, 1 - lab keys
p.buttons = buttons;

%% Display Parameters:
display.screenNum = max(Screen('Screens'));
display.dist = 50;      % cm office 50
display.width = 37;     % cm office 42?
display.bkColor = [255 255 255];
display.textColor = round(.75*[255 255 255]);
display.fixColor = [0 0 0];
display.fixOffset = [0 0];
display.fontSize = 30;
display.fontName = 'Courier';

Screen('Preference', 'SkipSyncTests',display.screenNum);
Screen('Preference','TextRenderer',1);

waitframes = 1; % flip every other frame

%% Open Screen

[display.windowPtr, rect] = Screen('OpenWindow',display.screenNum,display.bkColor);
topPriorityLevel = MaxPriority(display.windowPtr);
display.ifi = Screen('GetFlipInterval',display.windowPtr);
display.adj = (waitframes - 0.5)*display.ifi;
display.frameRate = 1/display.ifi; %Hz
display.resolution = rect([3,4]);
display.center = display.resolution/2;
Screen('TextSize', display.windowPtr, display.fontSize);
Screen('TextFont', display.windowPtr, display.fontName);
Screen('TextStyle', display.windowPtr, 0);

scr.monParamFileName = sprintf('expMonitorParams_%s.mat',p.computerName);
if ~exist(scr.monParamFileName)
    scr.monParamFileName = 'expMonitorParams_default';
    fprintf(1,'\n\n\n(prepScreen) !!!!!! Warning !!!!! \n(prepScreen)\t No monitor params file for this computer! Using defualt!!!\n\n');
end
load(scr.monParamFileName);
if meta.computer
    display.cl = CCGetCalibration(monParams.calibFile);
    gammaInverse = CCMakeInverseGamma(display.cl);
    BackupCluts; % This command restores the CLUTs with sca later.
    Screen('LoadNormalizedGammaTable', display.windowPtr, gammaInverse);
    fprintf('\n(prepScreen) Loaded calibration file normalized gamma table: %s\n',monParams.calibFile);
    fprintf(1,'--------------------------------------------------------------\n');
end

Screen('BlendFunction', display.windowPtr, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
Screen('Preference','TextRenderer',1);

Screen('Flip',display.windowPtr);

%% Stimulus Parameters

% p holds stimulus parameters in visual degree.
p.dia = 5;                          % aperture width
p.size = .2;                        % diameter of dots in degrees (.6 Saenz 2003)(.2 Serences 2007)(Ernst .15)
p.nDots = 100;                      % number of dots (?? Serences 2007)(50/field Saenz 2003)(Ernst 200)
% p.color = [0 0 0,255 255 255, 0 0 0, 255 255 255];
p.color = [0 0 0,0,0,0, 0 0 0, 0,0,0];
p.speed = 5;                        % translational velocity (deg/sec) (4.6 Serences 2007, Ernst)
p.eventspeed = 5;                   % appiditive speed of an event
p.coherence = 1;                    % (Ernst .1)
p.appCentx = 5.9;                   % 5.9 Serences, 11 Saenz
p.appCenty = 2.75;                  % +2.75 Serences, -2.5 Saenz
p.ecc = [-p.appCentx -p.appCentx, p.appCentx p.appCentx;...
    p.appCenty,p.appCenty,p.appCenty,p.appCenty]; % x1,x1,x2,x2;y1,y1,y2,y2 fields 1 and 2
p.lifetime = 12;                    % lifetime in frames (16 Serences 2007) (12 Saenz 2003)
p.direction = [45,135,45,135];      % direction clockwise from up. fields 1 and 2

% dots structure used to hold temporary conversion to pixel locations.
pixecc = angle2pix(display,p.ecc);
dots.ecc(1,:) = [repmat(pixecc(1,1),1,2*p.nDots),repmat(pixecc(1,3),1,2*p.nDots)];
dots.ecc(2,:) = [repmat(pixecc(2,1),1,2*p.nDots),repmat(pixecc(2,3),1,2*p.nDots)];
dots.size = angle2pix(display,p.size);
dots.life = ceil(rand(1,4*p.nDots)*p.lifetime);

% Using centered dots then shifting for each patch so these define
% aperture edges.
left = 0-p.dia/2;
right = 0+p.dia/2;
bottom = 0-p.dia/2;
top = 0+p.dia/2;

% indexing for each patch
L1 = 1:p.nDots;
L2 = (p.nDots+1):2*p.nDots;
R1 = (2*p.nDots+1):3*p.nDots;
R2 = (3*p.nDots+1):4*p.nDots;

%% Timing (secs then frames)
time.pretrial = .2;         % fixation time before cue
time.pretrialframes = round(time.pretrial/display.ifi);
time.cue = 1;              % cue time before dots
time.cueframes = round(time.cue/display.ifi);
time.CSI = .5;              % time between cue and dots
time.CSIframes = round(time.cue/display.ifi);
time.ITI = .3;              % time between end of last trial and start of next
time.ITIframes = round(time.ITI/display.ifi);
time.stim = 2.5;             % how long for dots
time.stimframes = round(time.stim/display.ifi);
time.SRI = .25;             % Time between dots offset and cue to responde
time.SRIframes = round(time.SRI/display.ifi);
time.resp = 2;              % how long to respond (window to respond in, does not make trial happen faster)
time.respframes = round(time.resp/display.ifi);
time.TT = time.pretrial + time.ITI + time.stim + time.resp;

t = linspace(0,time.stim,time.stimframes+1)';
t = t(1:end-1); % make the right length


%% Event timing

p.tsdsec = .1;              % target temporal wavefore stand. dev. in sec
p.eventbuffer = 3*p.tsdsec; % Event cant occur in the first or last few frames.

% if an event occurs in the attended field these are the times of the peak:
cond.eventtime = p.eventbuffer + (time.stim - 2*p.eventbuffer)*rand(1,cond.nTrials*cond.nBlocks);

% Speed vector for each frame set to baseline speed
framespeed = p.speed*ones(time.stimframes,1); % Most of the time the dots update with this speed

%% Cue
p.cue.size = .5; % deg width of square
p.cue.color = [0,0,0];
p.cue.ecc = [-1,1];                     % deg ecc from fix
p.cue.loc = [.15 .15 .25 .30];          % deg
p.cue.length = 2; % deg
p.cue.width = .5;

cue.ecc = angle2pix(display,p.cue.ecc);
cue.loc = angle2pix(display,p.cue.loc);

% Cue locations
cueLeftLoc = CenterRectOnPointd(cue.loc, ...
    cue.ecc(1) + display.center(1), 0+display.center(2));
cueRightLoc = CenterRectOnPointd(cue.loc, ...
    cue.ecc(2) + display.center(1), 0+display.center(2));

dimension_array = [25,25,10,5]; % Dimensions of the arrow: head_width, head_height, body_width, body_height

%% Feedback Tones
p.sounds(1).name = 'correctTone';
p.sounds(2).name = 'incorrectTone';
p.sounds(3).name = 'noresponseTone';

p.sounds(1).toneDur = 0.075;
p.sounds(2).toneDur = 0.075;
p.sounds(3).toneDur = 0.075;

p.sounds(1).toneFreq = 600;
p.sounds(2).toneFreq = 180;
p.sounds(3).toneFreq = 800;

playresponsetone(p,1)

%%
try
    % HideCursor;
    ListenChar(2);
    
    %% Dots
    % Generate the dot starting locations centered on the screen center for
    % all patches
    dots.xy = (rand(2,4*p.nDots)-.5)*p.dia; % (deg) Add eccentricity shift later
    
    %% Start Trial Loop
    block = 1;
    while block <= cond.nBlocks
        % beginning of block message
        BlockCountmsg = ['Block ',int2str(block),' of ',int2str(cond.nBlocks)];
        BlockTypemsg = strcat('\n ', char(cond.blocklabel(cond.blockType(block))));
        msg = [BlockCountmsg BlockTypemsg];
        % enforce break if after first block
        [isPressed,~,~] = KbCheck(-3);
        while isPressed % Wait until nothing pressed
            [isPressed,~,~] = KbCheck(-3);
        end
        
        if block > 1
            DrawFormattedText(display.windowPtr,'Please take a short break','center',display.center(2)*.15);
            DrawFormattedText(display.windowPtr,msg,'center',display.center(2)*.25);   % Block Message
            Screen('Flip',display.windowPtr);
        else
            DrawFormattedText(display.windowPtr,msg,'center',display.center(2)*.25);   % Block Message
            DrawFormattedText(display.windowPtr,'Press any key to continue','center',display.center(2)*.45);
            Screen('Flip',display.windowPtr);
        end;
        if ~meta.debugging
            KbWait(-3); % Use a keypress to initiate new block.
        end
        
        trial = 1;
        while trial <= cond.nTrials
            thistrial = trial + cond.nTrials*(block-1); % count for total trials
            
            
            %% Set up event
            tvec = repmat(framespeed,1,4);
            for field = 1:4
                % cond.attendL and .attendR hold which field is being attended
                % on each side.
                if cond.attendL(thistrial) || cond.attendR(thistrial) % if there is an event on either side
                    % The events happen at the same time so only one tmean
                    % needed:
                    % calculate temproal waveform (0-1) with tmean and tsd
                    tmean = cond.eventtime(thistrial);
                    tvec(:,field) = tvec(:,field) + p.eventspeed*exp(-((t-cond.eventtime(thistrial)).^2/(2*p.tsdsec^2)));
                end
            end
            FlushEvents
            
            % Pretrial fixation
            drawFix(display);
            vbl = Screen('Flip',display.windowPtr);
            for frame = 1:time.pretrialframes-1 % already used one frame for the fixation
                drawFix(display);
                vbl = Screen('Flip',display.windowPtr,vbl+display.adj);
            end
            
            % Precue
            for frame = 1:time.cueframes
                
                if cond.attendL(thistrial)==1 % If Left side is 1 then dir1
                    afield(1) = 1; % Helpful naming of attended fields
                    cuedir(1) = p.direction(1);
                    if cond.dualsame(thistrial) || cond.singlesame(thistrial) % If block condition is SAME
                        afield(2) = 3;
                        cuedir(2) = cuedir(1); % same attend direction
                    else
                        afield(2) = 4;
                        cuedir(2) = p.direction(2); % different attend direction
                    end
                elseif  cond.attendL(thistrial)==2 % If Left side is attend dir2 (1)
                    afield(1) = 2; % Helpful naming of attended fields
                    cuedir(1) = p.direction(2);
                    if cond.dualsame(thistrial) || cond.singlesame(thistrial) % If block condition is SAME
                        afield(2) = 4;
                        cuedir(2) = cuedir(1);
                    else
                        afield(2) = 3;
                        cuedir(2) = p.direction(1);
                    end
                end
                cuedir = cuedir + 90; % This adjustment gets the angle right for draw_arrow
                
                drawFix(display);
                draw_arrow(display.windowPtr, cueLeftLoc, cuedir(1), p.cue.color, dimension_array);
                draw_arrow(display.windowPtr, cueRightLoc, cuedir(2), p.cue.color, dimension_array);
                
                vbl = Screen('Flip',display.windowPtr,vbl+display.adj);
            end
            % Wait between cue and dots
            for frame = 1:time.CSIframes
                drawFix(display);
                vbl = Screen('Flip',display.windowPtr,vbl+display.adj);
            end
            
            Priority(topPriorityLevel);
            for frame = 1:time.stimframes
                
                % Get the speed for this frame
                dx = zeros(1,4);
                dy = zeros(1,4);
                for field = 1:4
                    curspeed = framespeed(frame)/display.frameRate;
                    if any(field==afield)
                        if field<=2 && cond.trialTargetL(thistrial) % If this is a left field and there is an event
                            curspeed = tvec(frame,field)/display.frameRate;
                        elseif field>2 && cond.trialTargetR(thistrial) % If right field and an event in that field
                            curspeed = tvec(frame,field)/display.frameRate;
                        end
                    end
                    % Dot speed - i.e. displacement per frame
                    dx(field) = curspeed*sin(p.direction(field)*pi/180);
                    dy(field) = -curspeed*cos(p.direction(field)*pi/180);
                end
                % Unwrap so they can be added as matrices later
                dx = reshape(repmat(dx,p.nDots,1),[1,4*p.nDots]);
                dy = reshape(repmat(dy,p.nDots,1),[1,4*p.nDots]);
                dotcol = reshape(repmat(p.color,p.nDots,1),[3,4*p.nDots]);
                
                x = dots.xy(1,:);
                y = dots.xy(2,:);
                
                % Use the equation of an ellipse to determine which dots fall inside.
                goodDots = x.^2/(p.dia/2)^2 + y.^2/(p.dia/2)^2 < 1;
                
                % Convert to pixels and move to desired eccentricity from screen center
                pixpos.x = angle2pix(display,x) + display.resolution(1)/2  + dots.ecc(1,:);
                pixpos.y = angle2pix(display,y) + display.resolution(2)/2  + dots.ecc(2,:);
                
                % Draw dots within the aperture
                Screen('DrawDots',display.windowPtr,...
                    [pixpos.x(goodDots);pixpos.y(goodDots)], ...
                    dots.size, dotcol(:,goodDots),[0,0],1);
                
                drawFix(display);
                Screen('Flip',display.windowPtr, vbl+display.adj);
                
                % Update for the next frame
                x = x + dx; % (deg) centered on screen center
                y = y + dy;
                
                %move the dots that are outside the aperture back one aperture
                %width.
                x(x<left) = x(x<left) + p.dia;
                x(x>right) = x(x>right) - p.dia;
                y(y<bottom) = y(y<bottom) + p.dia;
                y(y>top) = y(y>top) - p.dia;
                
                %increment the 'life' of each dot
                dots.life = dots.life+1;
                
                %find the 'dead' dots
                deadDots = mod(dots.life,p.lifetime)==0;
                
                %replace the positions of the dead dots to a random location
                x(deadDots) = (rand(1,sum(deadDots))-.5)*p.dia;
                y(deadDots) = (rand(1,sum(deadDots))-.5)*p.dia;
                
                % move current field dots back to dots structure
                dots.xy(1,:) = x;
                dots.xy(2,:) = y;
                
            end
            Priority(0);
            
            %% Wait between dots off and response cue
            for frame = 1:time.SRIframes
                Screen('Flip',display.windowPtr, vbl + display.adj);
            end
            
            %% Collect response
            result = 0; % Stop checking for a response once this is set to 1
            trialAbort = 0;
            response = 0;
            ynresponse = -1;
            correct = -1;
            
            for frame = 1:time.respframes
                
                respside = cond.responseL(thistrial);       % response side 1 = left, 0 = right
                drawFix(display);
                
                % Draw postcue
                if respside % Left
                    % For cue
                    postcueloc = cueLeftLoc;
                    postcueangle = 0;
                    % For response collection
                    correctresponse = cond.trialTargetL(thistrial);
                    mykeys = p.buttons.respL;
                    
                else        % Right
                    postcueloc = cueRightLoc;
                    postcueangle = 180;
                    
                    correctresponse = cond.trialTargetR(thistrial);
                    mykeys = p.buttons.respR;
                end
                draw_arrow(display.windowPtr, postcueloc, postcueangle, p.cue.color, dimension_array);
                Screen('Flip',display.windowPtr, vbl + display.adj);
                
                % First check for a key press
                [isPressed,~,keycode] = KbCheck(-3);
                nkey = length(mykeys);
                
                if isPressed && ~result
                    % Check if it is a response key or abort key
                    for i = 1:nkey % If it is one of the response keys...
                        if keycode(mykeys(i)) == 1
                            result = 1;
                            
                            % What was the response key?
                            KbName(keycode(mykeys(i)));
                            response = i;
                        end
                        
                    end
                    
                    if keycode(p.buttons.abort) % If is is the abort key
                        trialAbort = 1;
                        % DEAL WITH THE ABORT KEY AND CARRY THROUGH FOR
                        % GRACEFUL EXIT
                        fprintf('TestAbortKey: Aborting Experiment due to abort key');	%exit this function
                        
                        msg = 'Abort Requested. Please Wait';
                        DrawFormattedText(display.windowPtr,msg,'center',display.center(2)*.25);
                    end
                end
                if trialAbort % Keep displaying this until the end of response
                    DrawFormattedText(display.windowPtr,msg,'center',display.center(2)*.25);
                end
                
            end
            % Deal with the collected response.
            if result && ~trialAbort
                % remapping response to +ve and -ve for easy assignment to correctness
                if response == 1
                    response = -2;
                    ynresponse = 0;		% "no change"
                elseif response == 2
                    response = -1;
                    ynresponse = 0;		% "no change"
                elseif response == 3
                    response = 1;
                    ynresponse = 1;		% "change"
                elseif response == 4
                    response = 2;
                    ynresponse = 1;		% "change"
                end
                
                % play response feedback (currently only for incorrect)
                correct = correctresponse == ynresponse;
                if correct
                    beep = 1; % correct
                elseif ~correct
                    beep = 2; % incorrect
                end
                
            else % No response
                beep = 3; % No response
            end
            playresponsetone(p,beep);
            
            
            %% Save each trial
            % what to save:
            data.block(trial,:) = block;
            data.chosenResp(trial,:) = response;      % The rating scale value -2,-1,1,2
            data.ynresponse(trial,:) = ynresponse;    % binary yes no response
            data.respSide(trial,:) = respside;        % Which side the response was given for: 1-Left
            data.respCorrect(trial,:) = correct;      % Binary was the response correct
            data.correctResponse(trial,:) = correctresponse; % Is there a target on the response side
            data.trialTargetR(trial,:) = cond.trialTargetR(thistrial);    % Was there a change on the R
            data.trialTargetL(trial,:) = cond.trialTargetL(thistrial);
            data.blockCond(trial,:) = cond.blockvector(thistrial);           % What is the trial type for this block
            data.eventtime(trial,:) = cond.eventtime(thistrial);    % [first interval, second interval] (frames)
            data.abort(trial,:) = trialAbort;   % 0 no abort, 1 = abort
            
            if trialAbort
                % These settings will make the experiment end gracefully.
                trial = cond.nTrials + 1;
                block = cond.nBlocks + 1;
            else
                trial = trial + 1; % Update trial number
            end
            
        end
        % Save some stuff after every block
        blockFileNum =  sprintf('%02d',block);    % New file saved for this block
        save([meta.BlockTmpFile, blockFileNum, '.mat'],'data','p','display','meta','cond')
        clear data
        block = block + 1;
    end
    DrawFormattedText(display.windowPtr,'Experiment Complete \n Thank You! \n Please wait while we transfer the data files... \n This may take a couple minutes.','center',display.center(2)*.25);
    Screen(display.windowPtr,'Flip');
catch ME
    %Close Screen:
    sca
    ShowCursor;
    ListenChar(1);
    
    rethrow(ME)
end

%% Close Screen:
sca
ShowCursor;
ListenChar(1);

%% Save Stuff
% Consolidate tmp file data
tmpFiles = dir(fullfile(meta.dataDr,'*tmp*.mat'));
for i = 1:numel(tmpFiles)
    load(fullfile(meta.dataDr,tmpFiles(i).name))
    dataFields = fieldnames(data);
    
    % Data Structure
    for f = 1:numel(dataFields)
        thisVar = dataFields{f};
        
        if ~exist('task')
            eval('task.data = [];')
        end
        if ~isfield(task.data,thisVar)
            eval(sprintf('task.data.%s = [];',thisVar)) % Initiates variable in structure
        end
        
        task.data.(thisVar) = [task.data.(thisVar); data.(thisVar)];
    end
    
end
% Add to task structure
task.meta = meta;
task.display = display;
task.p = p;
task.cond = cond;

% Decide on session number to consolidate blocks into.
files = dir([meta.dataDr,'/*session*.mat']);
nSessions = length(files);
sessionFileNum =  sprintf('%02d',nSessions+1);
meta.sessionFullFile = [meta.sessionFile, sessionFileNum,'.mat'];

status = 1;
cancelsave = 0;
while status == 1   % Keep asking for filename until valid name provided
    
    cancelsave = 0;
    % use gui to save file - suggest name
    [meta.saveFileName, meta.saveFilepath] = uiputfile(meta.sessionFullFile, 'Enter a new filename');
    
    if isequal(meta.saveFileName,0) || isequal(meta.saveFilepath,0)
        disp('User pressed cancel')
        cancelsave = 1;
    else
        disp(['User selected ', fullfile(meta.saveFilepath, meta.saveFileName)])
        status = 0;
        % check for filename and suffix
        if isempty(meta.saveFileName)
            warning('on','Filename required')
            status = 1;
        end
        place = strfind(meta.saveFileName, '.mat');
        if isempty(place)
            warning('on','Required suffix not in filename!')
            status = 1;
        end
    end
    
    
    if cancelsave == 1
        choice = questdlg('Would you like to save this session?',...
            'Save menu',...
            'Yes','No','Yes');
        % Handle response
        switch choice
            case 'Yes'
                status = 1;
            case 'No'
                status = 0;
                fprintf('Subject decided not to save\n')
        end
    end
end
if ~cancelsave
    % Now can save
    save(fullfile(meta.saveFilepath,meta.saveFileName),'task')
end
% Move temp files
if ~isdir(fullfile(meta.dataDr,'tmpFiles'))
    mkdir(fullfile(meta.dataDr,'tmpFiles'))
end
tmpFiles = fullfile(meta.dataDr,'*tmp*.mat');
tmpFolder = fullfile(meta.dataDr,'tmpFiles');
if ~isempty(dir(tmpFiles))
    movefile(tmpFiles,tmpFolder)
end